{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/game-interface/game-interface.component.ts","webpack:///src/app/game-interface/game-interface.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/services/auth.service.ts","webpack:///src/app/services/send-data.service.ts","webpack:///src/app/services/trivia.service.ts","webpack:///src/app/setup/player-dialog/player-dialog.component.ts","webpack:///src/app/setup/player-dialog/player-dialog.component.html","webpack:///src/app/setup/same-amount.directive.ts","webpack:///src/app/setup/setup.component.ts","webpack:///src/app/setup/setup.component.html","webpack:///src/app/user-stats/user-stats.component.ts","webpack:///src/app/user-stats/user-stats.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","redirectUnauthorizedToLogin","routes","path","component","redirectTo","AppRoutingModule","forRoot","imports","AppComponent","authService","triviaService","title","defaultAvatarURL","userIdChange","subscribe","getCurrentUserObservable","user","userAvatarURL","photoURL","loggedInChange","bool","loggedIn","firstNameChange","firstName","logout","email","replace","selector","templateUrl","styleUrls","AppModule","initializeApp","firebase","declarations","providers","bootstrap","GameInterfaceComponent","sendDataService","router","delayTime","selectable","currentQuestions","users","questions","score","wrong","count","updateData","changeQuestion","userIndex","winning","highestScore","forEach","v","i","winners","push","length","toString","dataObject","getGameData","concat","j","Math","floor","random","temp","navigate","answerId","correctId","document","getElementById","classList","add","correctCategory","setTimeout","remove","isWinning","updateUserStats","LoginComponent","fb","google","facebook","signinSubmit","signupSubmit","isSignIn","isSignUp","emailRegex","signinForm","group","signinEmail","required","pattern","signinPassword","signupForm","signupEmail","signupPassword","signinErrorChange","error","signinError","signupErrorChange","signupError","loginWithGoogle","loginWithFacebook","valid","signup","value","signin","indicator","signInList","signUpList","get","signInOrSignUp","AuthService","af","afa","authState","providerData","displayName","next","uid","usersRef","collection","doc","update","_","getCategoriesObservable","categories","categoryAnswers","categoryObj","answeredCorrectly","answeredIncorrectly","category","name","set","totalGamesPlayed","totalGamesWon","totalGamesLost","totalQuestionsAnswered","totalQuestionsAnsweredIncorrectly","totalQuestionsAnsweredCorrectly","signInWithPopup","GoogleAuthProvider","FacebookAuthProvider","signOut","password","console","log","createUserWithEmailAndPassword","message","signInWithEmailAndPassword","providedIn","SendDataService","data","game","TriviaService","http","categoriesUrl","pipe","obj","trivia_categories","amountOfQuestions","categoryId","difficulty","questionType","a","c","d","qt","url","results","valueChanges","PlayerDialogComponent","dialogRef","playersPlaying","currentUser","nextPlayer","isDisabled","chosenPlayers","getAllUsersObservable","players","filtered","filter","player","event","Number","amount","close","target","tagName","parentNode","onCancel","sameAmountValidator","control","questionNum","SameAmountValidatortDirective","form","isSubmitted","submitted","invalid","provide","useExisting","multi","SetupComponent","route","dialog","snackBar","type","playerAmount","selected","getCurrentUser","snapshot","setUpForm","max","min","validators","getCategories","categoriesSubscription","unsubscribe","open","width","disableClose","afterClosed","result","setValue","sendGameData","getQuestionsObservable","sendData","duration","panelClass","UserStatsComponent","worstCategories","bestCategories","currentUserSubscription","cH","cL","cHR","cLR","cA","ratio","toFixed","join","test","avatar","environment","production","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SetupComponent } from './setup/setup.component';\nimport { LoginComponent } from './login/login.component';\nimport { GameInterfaceComponent } from './game-interface/game-interface.component'\n\nimport { redirectUnauthorizedTo, canActivate } from '@angular/fire/auth-guard';\nimport { UserStatsComponent } from './user-stats/user-stats.component';\n\nconst redirectUnauthorizedToLogin = () => redirectUnauthorizedTo(['log-in']);\n\nconst routes: Routes = [\n  {\n    path: 'set-up',\n    component: SetupComponent,\n    ...canActivate(redirectUnauthorizedToLogin)\n  },\n  { path: 'log-in', component: LoginComponent },\n  {\n    path: 'game',\n    component: GameInterfaceComponent,\n    ...canActivate(redirectUnauthorizedToLogin)\n  },\n  {\n    path: 'userStats',\n    component: UserStatsComponent,\n    ...canActivate(redirectUnauthorizedToLogin)\n  },\n  { path: '**', redirectTo: 'log-in' },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from './services/auth.service';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { User } from './interfaces/user';\nimport { TriviaService } from './services/trivia.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  title = 'trivia';\n\n  loggedIn: boolean;\n  firstName: string;\n\n  userAvatarURL: string;\n\n  defaultAvatarURL: string = 'https://i0.wp.com/www.mvhsoracle.com/wp-content/uploads/2018/08/default-avatar.jpg?ssl=1';\n\n  constructor(\n    private authService: AuthService,\n    private triviaService: TriviaService\n  ) { }\n\n  ngOnInit() {\n    this.authService.userIdChange.subscribe(id => {\n      if (id !== '') {\n        this.triviaService.getCurrentUserObservable(id).subscribe(user => {\n          this.userAvatarURL = user.photoURL;\n        });\n      }\n    });\n\n    this.authService.loggedInChange.subscribe(bool => {\n      this.loggedIn = bool;\n    });\n\n    this.authService.firstNameChange.subscribe(firstName => {\n      this.firstName = firstName;\n    });\n  }\n\n  logout() {\n    this.authService.logout();\n  }\n\n  getDefaultUsername(email: string): string {\n    return email.replace(/@.+/, '');\n  }\n}\n","<mat-toolbar color=\"accent\">\n  <mat-toolbar-row id=\"toolbar-row\">\n    <h1>Trivia</h1>\n\n    <div id=\"routes\" *ngIf=\"loggedIn\">\n        <button routerLink=\"/set-up\" mat-raised-button color=\"primary\">Game Set Up</button>\n\n        <button mat-raised-button [matMenuTriggerFor]=\"menu\" id=\"message\">\n          <img id=\"avatar\" [src]=\"userAvatarURL ? userAvatarURL : defaultAvatarURL\"/>\n          {{ firstName }}\n          <mat-icon>arrow_drop_down</mat-icon>\n        </button>\n        \n        <mat-menu #menu=\"matMenu\" class=\"mat-toolbar mat-warn\">\n          <button mat-menu-item routerLink=\"/userStats\">\n            Profile\n            <mat-icon>person</mat-icon>\n          </button>\n          <button mat-menu-item (click)=\"logout()\">\n            Logout\n            <mat-icon>exit_to_app</mat-icon>\n          </button>\n        </mat-menu>\n      </div>\n  </mat-toolbar-row>\n</mat-toolbar>\n\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { SetupComponent } from './setup/setup.component';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { LoginComponent } from './login/login.component';\n\nimport { AngularFirestoreModule } from '@angular/fire/firestore';\nimport { AngularFireModule } from '@angular/fire';\nimport { AngularFireAuthModule } from '@angular/fire/auth';\nimport { environment } from 'src/environments/environment';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatListModule } from '@angular/material/list';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { SameAmountValidatortDirective } from './setup/same-amount.directive';\nimport { PlayerDialogComponent } from './setup/player-dialog/player-dialog.component';\nimport { GameInterfaceComponent } from './game-interface/game-interface.component';\nimport { UserStatsComponent } from './user-stats/user-stats.component';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatSliderModule } from '@angular/material/slider';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SetupComponent,\n    LoginComponent,\n    SameAmountValidatortDirective,\n    PlayerDialogComponent,\n    GameInterfaceComponent,\n    UserStatsComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatInputModule,\n    MatButtonModule,\n    MatCardModule,\n    MatDialogModule,\n    MatListModule,\n    MatDividerModule,\n    MatSnackBarModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatExpansionModule,\n    HttpClientModule,\n    MatMenuModule,\n    MatIconModule,\n    AngularFireModule.initializeApp(environment.firebase),\n    AngularFireAuthModule,\n    AngularFirestoreModule,\n    FontAwesomeModule,\n    MatToolbarModule,\n\tMatSliderModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { SendDataService } from '../services/send-data.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Result } from '../interfaces/result';\nimport { Data } from '../interfaces/data';\nimport { User } from '../interfaces/user';\nimport { CategoryAnswer } from '../interfaces/categoryAnswer'\nimport { TriviaService } from '../services/trivia.service';\n\n@Component({\n\tselector: 'app-game-interface',\n\ttemplateUrl: './game-interface.component.html',\n\tstyleUrls: ['./game-interface.component.scss']\n})\nexport class GameInterfaceComponent implements OnInit {\n\tdelayTime: number = 2000\n\tselectable: boolean = true\n\tdefaultAvatarURL: string = 'https://i0.wp.com/www.mvhsoracle.com/wp-content/uploads/2018/08/default-avatar.jpg?ssl=1'\n\t\n\tcurrentQuestions = {\n\t\t\"question\": \"\",\n\t\t\"answers\": []\n\t}\n\tusers: User[] = []\n\tquestions: Result[] = []\n\tscore: number[] = []\n\twrong: number[] = []\n\tcount: number = 0\n\n\tconstructor(\n\t\tprivate triviaService: TriviaService,\n\t\tprivate sendDataService: SendDataService,\n\t\tprivate router: Router\n\t){ }\n\tngOnInit(): void {\n\t\tthis.updateData()\n\t\tthis.changeQuestion()\n\t}\n\tisWinning(userIndex) {\n\t\tlet winning = \"L\"\n\t\tlet highestScore = 0\n\t\tthis.score.forEach((v, i) => {\n\t\t\tif (userIndex !== i && v > highestScore) {\n\t\t\t\thighestScore = v\n\t\t\t}\n\t\t})\n\t\tif (this.score[userIndex] > highestScore && this.score[userIndex] > 0) {\n\t\t\twinning = \"W\"\n\t\t}\n\t\telse if (this.score[userIndex] >= highestScore) {\n\t\t\twinning = \"T\"\n\t\t}\n\t\treturn winning\n\t}\n\tfinalWinner() {\n\t\tlet winners = []\n\t\tlet highestScore = 0\n\t\tthis.score.forEach((v, i) => {\n\t\t\tif (v > highestScore && v > 0) {\n\t\t\t\twinners = [this.users[i]['displayName'] ? this.users[i]['displayName'] : this.users[i]['uid']]\n\t\t\t\thighestScore = v\n\t\t\t}\n\t\t\telse if (v >= highestScore && highestScore > 0) {\n\t\t\t\twinners.push(this.users[i]['displayName'] ? this.users[i]['displayName'] : this.users[i]['uid'])\n\t\t\t\thighestScore = v\n\t\t\t}\n\t\t})\n\t\treturn `${winners.length > 1 ? 'Winners' : 'Winner'}: ${winners.length > 0 ? winners.toString() : 'NO ONE'}`\n\t}\n\tupdateData() {\n\t\tlet dataObject: Data = this.sendDataService.getGameData()\n\t\tthis.questions = dataObject[\"questions\"]\n\t\tthis.users = dataObject[\"users\"]\n\t\tthis.users.forEach((v) => {\n\t\t\tif (typeof v !== 'object') {\n\t\t\t\tthis.users = []\n\t\t\t\tthis.score = []\n\t\t\t\tthis.wrong = []\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.score.push(0)\n\t\t\t\tthis.wrong.push(0)\n\t\t\t}\n\t\t})\n\t}\n\tchangeQuestion() {\n\t\tif (this.questions.length > 0 && this.users.length > 0) {\n\t\t\tthis.currentQuestions[\"question\"] = this.questions[this.count][\"question\"]\n\t\t\tthis.currentQuestions[\"answers\"] = this.questions[this.count][\"incorrect_answers\"].concat(this.questions[this.count][\"correct_answer\"])\n\t\t\tif (this.currentQuestions[\"answers\"].length > 2) {\n\t\t\t\t// Randomize the questions\n\t\t\t\tfor (let i = this.currentQuestions[\"answers\"].length - 1; i > 0; i--) {\n\t\t\t\t\tlet j = Math.floor(Math.random() * (i + 1))\n\t\t\t\t\tlet temp = this.currentQuestions[\"answers\"][i]\n\t\t\t\t\tthis.currentQuestions[\"answers\"][i] = this.currentQuestions[\"answers\"][j]\n\t\t\t\t\tthis.currentQuestions[\"answers\"][j] = temp\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.currentQuestions[\"answers\"][0] === \"False\") {\n\t\t\t\t// Make \"True\" always be on top.\n\t\t\t\tlet temp = this.currentQuestions[\"answers\"][0]\n\t\t\t\tthis.currentQuestions[\"answers\"][0] = this.currentQuestions[\"answers\"][1]\n\t\t\t\tthis.currentQuestions[\"answers\"][1] = temp\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.updateData()\n\t\t\tif (this.questions.length > 0 && this.users.length > 0) {\n\t\t\t\tthis.changeQuestion()\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.router.navigate(['/set-up'])\n\t\t\t}\n\t\t}\n\t}\n\tselectAnswer(answerId) {\n\t\tif (this.count >= this.questions.length) return\n\t\tthis.selectable = false\n\t\tlet correctId = \"\"\n\t\tthis.currentQuestions[\"answers\"].forEach((v, i) => {\n\t\t\tif (v === this.questions[this.count][\"correct_answer\"]) {\n\t\t\t\tcorrectId = \"answer\" + i\n\t\t\t}\n\t\t})\n\t\tdocument.getElementById(correctId) ? document.getElementById(correctId).classList.add(\"correct\") : ''\n\t\tlet correctCategory: number = -1\n\t\tthis.users[this.count % this.users.length]['categoryAnswers'].forEach((v, i) => {\n\t\t\tif (v[\"category\"] === this.questions[this.count][\"category\"] && correctCategory === -1) {\n\t\t\t\tcorrectCategory = i\n\t\t\t}\n\t\t})\n\t\tif (this.currentQuestions[\"answers\"][answerId] !== this.questions[this.count][\"correct_answer\"]) {\n\t\t\tthis.wrong[this.count % this.users.length]++\n\t\t\tdocument.getElementById('answer' + answerId) ? document.getElementById('answer' + answerId).classList.add(\"incorrect\") : ''\n\t\t\tif (correctCategory > -1) {\n\t\t\t\tthis.users[this.count % this.users.length]['categoryAnswers'][correctCategory][\"answeredIncorrectly\"]++\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.score[this.count % this.users.length]++\n\t\t\tif (correctCategory > -1) {\n\t\t\t\tthis.users[this.count % this.users.length]['categoryAnswers'][correctCategory][\"answeredCorrectly\"]++\n\t\t\t}\n\t\t}\n\t\tsetTimeout(() => {\n\t\t\tdocument.getElementById(correctId) ? document.getElementById(correctId).classList.remove(\"correct\") : ''\n\t\t\tdocument.getElementById('answer' + answerId) ? document.getElementById('answer' + answerId).classList.remove(\"incorrect\") : ''\n\t\t\tif (++this.count < this.questions.length) {\n\t\t\t\tthis.changeQuestion()\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.currentQuestions[\"question\"] = \"\"\n\t\t\t\tthis.currentQuestions[\"answers\"] = []\n\t\t\t\t//End of the game. Scores all in\n\t\t\t\t//console.log(this.score)\n\t\t\t\tthis.users.forEach((v, i) => {\n\t\t\t\t\tif (this.isWinning(i) === \"W\" && this.users.length > 1) {\n\t\t\t\t\t\tthis.users[i]['totalGamesWon']++\n\t\t\t\t\t}\n\t\t\t\t\telse if (this.isWinning(i) === \"L\" && this.users.length > 1) {\n\t\t\t\t\t\tthis.users[i]['totalGamesLost']++\n\t\t\t\t\t}\n\t\t\t\t\telse if (this.isWinning(i) === \"T\" && this.users.length > 1 && this.score[i] > 0) {\n\t\t\t\t\t\tthis.users[i]['totalGamesWon']++\n\t\t\t\t\t}\n\t\t\t\t\tthis.users[i]['totalQuestionsAnswered'] += (this.questions.length / this.users.length)\n\t\t\t\t\tthis.users[i]['totalQuestionsAnsweredCorrectly'] += this.score[i]\n\t\t\t\t\tthis.users[i]['totalQuestionsAnsweredIncorrectly'] += this.wrong[i]\n\t\t\t\t\tthis.users[i]['totalGamesPlayed']++\n\t\t\t\t})\n\t\t\t\tthis.triviaService.updateUserStats(this.users)\n\t\t\t}\n\t\t\tthis.selectable = true\n\t\t}, this.delayTime)\n\n\t}\n\n}\n","<mat-card [ngClass]=\"{'game-main-card': true, 'hide': count >= questions.length}\">\n\t<mat-card [ngClass]=\"{'user-card': true, 'hide': users.length <= 1}\">\n\t\t<mat-card-header>\n\t\t\t<mat-card-title>\n\t\t\t\t<img [src]=\"users.length > 0 ? (users[(count) % users.length]['photoURL'] ? users[(count) % users.length]['photoURL'] : defaultAvatarURL) : ''\">\n\t\t\t\t<span [innerHTML]=\"users.length > 0 ? (users[(count) % users.length]['displayName'] ? users[(count) % users.length]['displayName'] : users[(count) % users.length]['uid']) : ''\"></span>\n\t\t\t</mat-card-title>\n\t\t</mat-card-header>\n\t</mat-card>\n\t<mat-card class=\"game-title-card\">\n\t\t<mat-card-header>\n\t\t\t<mat-card-title>\n\t\t\t\t<span [innerHTML]=\"currentQuestions['question']\"></span>\n\t\t\t</mat-card-title>\n\t\t</mat-card-header>\n\t</mat-card>\n\t<mat-card-actions>\n\t\t<button mat-button [disabled]=\"!selectable\" *ngFor=\"let answer of currentQuestions['answers']; let i = index\"\n\t\t(click)=\"selectAnswer(i)\" [id]=\"'answer' + i\">\n\t\t\t<span [innerHTML]=\"answer\"></span>\n\t\t</button>\n\t</mat-card-actions>\n</mat-card>\n<mat-card class=\"progress-card\">\n\t<mat-card-title class=\"progress-title\">{{ count }}/{{ questions.length }} Questions</mat-card-title>\n\t<mat-slider min=\"0\" max=\"{{questions.length}}\" step=\"1\" value=\"{{count}}\" [disabled]=\"true\"></mat-slider>\n\t<mat-card [ngClass]=\"{'finalMessage': true, 'hide': count < questions.length || users.length <= 1}\">\n\t\t<mat-card-title>{{ finalWinner() }}</mat-card-title>\n\t</mat-card>\n\t<mat-card class=\"user-progress-card\" *ngFor=\"let user of users; let i = index\">\n\t\t<mat-card-title class=\"user-progress-title\">\n\t\t\t{{ user['displayName'] ? user['displayName'] : user['uid'] }}\n\t\t\t<span [className]=\"users.length > 1 ? (isWinning(i) === 'W' ? 'winning' : isWinning(i) === 'L' ? 'losing' : 'tie') : 'hide'\" [innerHTML]=\"isWinning(i) === 'W' ? 'WINNING' : isWinning(i) === 'L' ? 'LOSING' : 'TIED'\"></span>\n\t\t\t<span class=\"info\">{{score[i]}} CORRECT | {{wrong[i]}} WRONG</span>\n\t\t</mat-card-title>\n\t\t<mat-slider class=\"correct-slider\" min=\"0\" max=\"{{questions.length/users.length}}\" step=\"1\" value=\"{{score[i]}}\" [disabled]=\"true\"></mat-slider>\n\t\t<mat-slider class=\"incorrect-slider\" min=\"0\" max=\"{{questions.length/users.length}}\" step=\"1\" value=\"{{wrong[i]}}\" [disabled]=\"true\"></mat-slider>\n\t</mat-card>\n\t<mat-card-actions [ngClass]=\"{'resultButtons': true, 'hide': count < questions.length}\">\n\t\t<button mat-button routerLink=\"/set-up\">Play Again</button>\n\t\t<button mat-button routerLink=\"/userStats\">Open Stats</button>\n\t</mat-card-actions>\n</mat-card>","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../services/auth.service';\n\nimport { faGoogle } from '@fortawesome/free-brands-svg-icons/faGoogle';\nimport { faFacebook } from '@fortawesome/free-brands-svg-icons/faFacebook';\nimport { Router } from '@angular/router';\nimport { FormGroup, FormBuilder, Validators, FormControl, AbstractControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  google = faGoogle;\n  facebook = faFacebook;\n\n  signinForm: FormGroup;\n  signupForm: FormGroup;\n\n  signinError: string;\n  signupError: string;\n\n  signinSubmit: boolean = false;\n  signupSubmit: boolean = false;\n\n  isSignIn: boolean = true;\n  isSignUp: boolean = false;\n\n  emailRegex: RegExp = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private fb: FormBuilder\n  ) { }\n\n  ngOnInit(): void {\n    this.signinForm = this.fb.group({\n      signinEmail: new FormControl('', [\n        Validators.required,\n        Validators.pattern(this.emailRegex)\n      ]),\n      signinPassword: new FormControl('', [Validators.required])\n    });\n\n    this.signupForm = this.fb.group({\n      signupEmail: new FormControl('', [\n        Validators.required,\n        Validators.pattern(this.emailRegex)\n      ]),\n      signupPassword: new FormControl('', [Validators.required])\n    });\n\n    this.authService.signinErrorChange.subscribe(error => {\n      this.signinError = error;\n    });\n\n    this.authService.signupErrorChange.subscribe(error => {\n      this.signupError = error;\n    });\n\n    this.authService.loggedInChange.subscribe(bool => {\n      if (bool) {\n        this.router.navigate(['set-up']);\n      }\n    });\n  }\n\n  signInWithGoogle(): void {\n    this.authService.loginWithGoogle();\n  }\n\n  signInWithFacebook(): void {\n    this.authService.loginWithFacebook();\n  }\n\n  signup(): void {\n    if (this.signupForm.valid) {\n      this.authService.signup(this.signupForm.value.signupEmail, this.signupForm.value.signupPassword);\n    }\n\n    this.signupSubmit = true;\n  }\n\n  signin(): void {\n    if (this.signinForm.valid) {\n      this.authService.signin(this.signinForm.value.signinEmail, this.signinForm.value.signinPassword);\n    }\n\n    this.signinSubmit = true;\n  }\n\n  resetSigninError(): void {\n    this.signinError = '';\n  }\n\n  resetSignupError(): void {\n    this.signupError = '';\n  }\n\n  signInOrSignUp(indicator?: boolean) {\n    this.isSignIn = !this.isSignIn;\n    this.isSignUp = !this.isSignUp;\n\n    const signInList = document.getElementById('sign-in').classList;\n    const signUpList = document.getElementById('sign-up').classList;\n\n    if (indicator) {\n      signInList.add('active');\n      signUpList.remove('active');\n    } else {\n      signUpList.add('active');\n      signInList.remove('active');\n    }\n  }\n\n  get signinEmail(): AbstractControl { return this.signinForm.get('signinEmail'); }\n\n  get signinPassword(): AbstractControl { return this.signinForm.get('signinPassword'); }\n\n  get signupEmail(): AbstractControl { return this.signupForm.get('signupEmail'); }\n\n  get signupPassword(): AbstractControl { return this.signupForm.get('signupPassword'); }\n}\n","<div id=\"sign-in-container\">\n  <div>\n    <button id=\"sign-in\" mat-stroked-button class=\"active\" (click)=\"signInOrSignUp(true)\">Sign In</button>\n    <button id=\"sign-up\" mat-stroked-button (click)=\"signInOrSignUp()\">Sign Up</button>\n  </div>\n\n  <mat-card id=\"sign-in-card\" *ngIf=\"isSignIn\">\n    <mat-card-title>Sign In</mat-card-title>\n    <mat-card-subtitle>To Start Playing</mat-card-subtitle>\n    <mat-card-content id=\"sign-in-content\">\n      <form [formGroup]=\"signinForm\">\n        <mat-form-field>\n          <mat-label>Enter your Email</mat-label>\n          <input matInput placeholder=\"email\" formControlName=\"signinEmail\" (ngModelChange)=\"resetSigninError()\"\n            required>\n        </mat-form-field>\n\n        <div *ngIf=\"signinEmail.invalid && (signinEmail.dirty || signinEmail.touched || signinSubmit)\">\n          <mat-error *ngIf=\"signinEmail.errors.required\">\n            Email is required\n          </mat-error>\n\n          <mat-error *ngIf=\"signinEmail.errors.pattern\">\n            Email is invalid\n          </mat-error>\n        </div>\n\n        <mat-form-field>\n          <mat-label>Enter your Password</mat-label>\n          <input type=\"password\" matInput placeholder=\"password\" formControlName=\"signinPassword\"\n            (ngModelChange)=\"resetSigninError()\" required>\n        </mat-form-field>\n\n        <mat-error\n          *ngIf=\"signinPassword.errors?.required && (signinPassword.dirty || signinPassword.touched || signinSubmit)\">\n          Password is required\n        </mat-error>\n\n        <mat-error *ngIf=\"signinError && signinForm.valid\">\n          {{ signinError }}\n        </mat-error>\n\n        <div>\n          <button mat-raised-button class=\"mat-warn\" (click)=\"signin()\">Sign In</button>\n        </div>\n      </form>\n\n      <div>OR</div>\n\n      <button id='google' mat-raised-button (click)='signInWithGoogle()'>\n        <fa-icon [icon]='google'></fa-icon>\n        <span>Continue with Google</span>\n      </button>\n\n      <button id='facebook' mat-raised-button (click)='signInWithFacebook()'>\n        <fa-icon [icon]='facebook'></fa-icon>\n        <span>Continue with Facebook</span>\n      </button>\n    </mat-card-content>\n  </mat-card>\n\n  <mat-card id=\"sign-up-card\" *ngIf=\"isSignUp\">\n    <mat-card-title>Sign Up</mat-card-title>\n    <mat-card-content id=\"sign-up-content\">\n      <form [formGroup]=\"signupForm\">\n        <mat-form-field>\n          <mat-label>Email</mat-label>\n          <input matInput placeholder=\"Ex. example@gmail.com\" formControlName=\"signupEmail\"\n            (ngModelChange)=\"resetSignupError()\" required>\n        </mat-form-field>\n\n        <div *ngIf=\"signupEmail.invalid && (signupEmail.dirty || signupEmail.touched || signupSubmit)\">\n          <mat-error *ngIf=\"signupEmail.errors.required\">\n            Email is required\n          </mat-error>\n\n          <mat-error *ngIf=\"signupEmail.errors.pattern\">\n            Email is invalid\n          </mat-error>\n        </div>\n\n        <mat-form-field>\n          <mat-label>Password</mat-label>\n          <input type=\"password\" matInput placeholder=\"Ex. password#@12\" formControlName=\"signupPassword\"\n            (ngModelChange)=\"resetSignupError()\" required>\n        </mat-form-field>\n\n        <mat-error\n          *ngIf=\"signupPassword.errors?.required && (signupPassword.dirty || signupPassword.touched || signupSubmit)\">\n          Password is required\n        </mat-error>\n\n        <mat-error *ngIf=\"signupError && signupForm.valid\">\n          {{ signupError }}\n        </mat-error>\n\n        <div>\n          <button mat-raised-button class=\"mat-warn\" (click)=\"signup()\">Create Account</button>\n        </div>\n      </form>\n    </mat-card-content>\n  </mat-card>\n</div>","import { Injectable } from '@angular/core';\n\nimport { Router } from '@angular/router';\nimport { auth } from 'firebase/app';\n\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { User } from '../interfaces/user';\nimport { Subject, BehaviorSubject } from 'rxjs';\n\nimport { TriviaService } from './trivia.service';\nimport { CategoryAnswer } from '../interfaces/categoryAnswer';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  user: User;\n\n  loggedInChange: Subject<boolean> = new Subject<boolean>();\n  firstNameChange: Subject<string> = new Subject<string>();\n  signinErrorChange: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  signupErrorChange: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  userIdChange: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  constructor(\n    private af: AngularFirestore,\n    private afa: AngularFireAuth,\n    private router: Router,\n    private triviaService: TriviaService\n  ) {\n    this.afa.authState.subscribe(user => {\n      if (user) {\n        this.user = user.providerData[0];\n        let displayName = this.user.displayName;\n        const email = this.user.email;\n\n        if (displayName) {\n          displayName = displayName.replace(/\\s.+/, '');\n        } else {\n          displayName = email.replace(/@.+/, '');\n        }\n\n        this.userIdChange.next(this.user.uid);\n        this.loggedInChange.next(true);\n        this.firstNameChange.next(displayName);\n\n        const usersRef = this.af.collection('users').doc(this.user.uid);\n\n        usersRef.update({...this.user}).catch(_ => {\n          this.triviaService.getCategoriesObservable().subscribe(categories => {\n            const categoryAnswers: CategoryAnswer[] = [];\n\n            for (let categoryObj of categories) {\n              categoryAnswers.push({\n                answeredCorrectly: 0,\n                answeredIncorrectly: 0,\n                category: categoryObj.name\n              });\n            }\n\n            this.af.collection('users').doc(this.user.uid).set({\n              ...this.user,\n              totalGamesPlayed: 0,\n              totalGamesWon: 0,\n              totalGamesLost: 0,\n              totalQuestionsAnswered: 0,\n              totalQuestionsAnsweredIncorrectly: 0,\n              totalQuestionsAnsweredCorrectly: 0,\n              categoryAnswers\n            });\n          });\n        });\n      }\n    });\n  }\n\n  async loginWithGoogle() {\n    await this.afa.signInWithPopup(new auth.GoogleAuthProvider());\n    this.router.navigate(['set-up']);\n  }\n\n  async loginWithFacebook() {\n    await this.afa.signInWithPopup(new auth.FacebookAuthProvider());\n    this.router.navigate(['set-up']);\n  }\n\n  async logout() {\n    this.loggedInChange.next(false);\n    await this.afa.signOut();\n    this.router.navigate(['log-in']);\n  }\n\n  signup(email: string, password: string) {\n    console.log(email, password);\n    this.afa.createUserWithEmailAndPassword(email, password)\n      .then(_ => {\n        console.log('Successfully created an account');\n      })\n      .catch(e => {\n        console.log('Error with signing up:');\n        console.log(e.message);\n\n        this.signupErrorChange.next(e.message);\n      });\n  }\n\n  signin(email: string, password: string) {\n    this.afa.signInWithEmailAndPassword(email, password)\n      .then(_ => {\n        console.log(\"Successfully signed in using email and password\");\n      })\n      .catch(e => {\n        console.log('Error with signing in with email and password:');\n        console.log(e.message);\n\n        this.signinErrorChange.next(e.message);\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\nimport { Result } from '../interfaces/result';\nimport { Data } from '../interfaces/data';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SendDataService {\n  data: Data = {\n    users: [],\n    questions: []\n  };\n\n  constructor() { }\n\n  sendGameData(game: Data) {\n    this.data = game\n  }\n\n  // clearGameData() {\n  //   this.subject.next()\n  // }\n\n  getGameData() {\n    return this.data\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { TopLevel } from '../interfaces/toplevel';\nimport { Category } from '../interfaces/category';\nimport { Result } from '../interfaces/result';\nimport { User } from '../interfaces/user';\nimport { AuthService } from './auth.service';\nimport { AngularFirestore } from '@angular/fire/firestore';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TriviaService {\n  categoriesUrl: string = 'https://opentdb.com/api_category.php';\n\n  constructor(\n    private http: HttpClient,\n    private af: AngularFirestore\n  ) { }\n\n  getCategoriesObservable(): Observable<Array<Category>> {\n    return this.http.get<TopLevel>(this.categoriesUrl).pipe(\n      map((obj: TopLevel) => {\n        return obj.trivia_categories;\n      })\n    );\n  } \n\n  getQuestionsObservable(\n    amountOfQuestions: number,\n    categoryId: number,\n    difficulty: string,\n    questionType: string\n  ): Observable<Array<Result>> {\n    const a = `amount=${amountOfQuestions}`;\n    const c = categoryId ? `category=${categoryId}` : '';\n    const d = difficulty ? `difficulty=${difficulty}` : '';\n    const qt = questionType ? `type=${questionType}` : '';\n    const url = `https://opentdb.com/api.php?${a}&${c}&${d}&${qt}`.replace(/&+$/, '').replace(/&+/, '&');\n    return this.http.get<TopLevel>(url).pipe(\n      map((obj: TopLevel) => {\n        return obj.results;\n      })\n    )\n  }\n\n  getAllUsersObservable(): Observable<Array<User>> {\n    return this.af.collection<User>('users').valueChanges();\n  }\n\n  getCurrentUserObservable(id: string): Observable<User> {\n    return this.af.collection('users').doc<User>(id).valueChanges();\n  }\n\n  updateUserStats(users: User[]): void {\n    for (let user of users) {\n      this.af.collection('users').doc(user.uid).update({\n        ...user\n      });\n    }\n  }\n}","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { TriviaService } from 'src/app/services/trivia.service';\n\n@Component({\n  selector: 'app-player-dialog',\n  templateUrl: './player-dialog.component.html',\n  styleUrls: ['./player-dialog.component.scss']\n})\nexport class PlayerDialogComponent implements OnInit {\n  players;\n  playersPlaying = [this.data.currentUser];\n  nextPlayer = false;\n  isDisabled = false;\n  chosenPlayers = 1;\n\n  defaultAvatarURL: string = 'https://i0.wp.com/www.mvhsoracle.com/wp-content/uploads/2018/08/default-avatar.jpg?ssl=1';\n\n  constructor(\n    public dialogRef: MatDialogRef<PlayerDialogComponent>,\n    private authService: AuthService,\n    private triviaService: TriviaService,\n    @Inject(MAT_DIALOG_DATA) public data\n  ) { }\n\n  ngOnInit(): void {\n    this.triviaService.getAllUsersObservable()\n      .subscribe(players => {\n        let filtered = players.filter(player => player.uid !== this.data.currentUser.uid)\n\n        this.players = filtered\n      })\n  }\n\n  playerClicked(player, event) {\n\n    if (Number(this.data.amount) <= 2) {\n      this.playersPlaying.push(player)\n      this.dialogRef.close(this.playersPlaying);\n    } else {\n      if (event.target.tagName === 'MAT-CARD') {\n        // make players already chosen disabled\n        event.target.classList.add('disabled')\n      }\n      else {\n        event.target.parentNode.classList.add('disabled')\n      }\n        this.nextPlayer = true\n        this.playersPlaying.push(player)\n        this.chosenPlayers++\n        if (this.chosenPlayers === Number(this.data.amount)) {\n          this.dialogRef.close(this.playersPlaying)\n        }\n    }\n  }\n\n  onCancel() {\n    this.dialogRef.close(\"canceled\")\n  }\n\n  getDefaultUsername(email: string): string {\n    return email.replace(/@.+/, '');\n  }\n}\n","<h1 matDialogTitle>Choose Who's Playing</h1>\n<mat-card-subtitle *ngIf=\"nextPlayer\">Choose player {{data.amount}}</mat-card-subtitle>\n\n<mat-dialog-content>\n    <mat-card (click)=\"playerClicked(player, $event)\" *ngFor=\"let player of players\" >\n        <img mat-card-avatar [src]=\"player.photoURL ? player.photoURL : defaultAvatarURL\">\n        <mat-card-title>{{ player.displayName ? player.displayName : getDefaultUsername(player.email) }}</mat-card-title>\n    </mat-card>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n    <button mat-raised-button (click)=\"onCancel()\" color=\"primary\">Cancel</button>\n</mat-dialog-actions>","import { Directive } from '@angular/core';\nimport { ValidatorFn, FormGroup, ValidationErrors, NG_VALIDATORS, Validator, AbstractControl, FormControl, FormGroupDirective, NgForm } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\n\nexport const sameAmountValidator: ValidatorFn = (control: FormGroup): ValidationErrors |\nnull => {\n  const amount = control.get('amount');\n  const questionNum = control.get('questionNum');\n\n  return amount && questionNum && questionNum.value % Number(amount.value) !== 0 ? {'notDivisibleByPlayers': true} :\n  null;\n}\n\n@Directive({\n  selector: '[appSameAmount]',\n  providers: [{ provide: NG_VALIDATORS, useExisting: SameAmountValidatortDirective,\n  multi: true}]\n})\nexport class SameAmountValidatortDirective implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return (control && control.invalid);\n  }\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { NgForm, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { TriviaService } from '../services/trivia.service';\nimport { Observable, Subscription } from 'rxjs';\nimport { Category } from '../interfaces/category';\nimport { sameAmountValidator } from './same-amount.directive';\nimport { SendDataService } from '../services/send-data.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { PlayerDialogComponent } from './player-dialog/player-dialog.component';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Result } from '../interfaces/result';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { AuthService } from '../services/auth.service';\nimport { Data } from '../interfaces/data';\nimport { User } from '../interfaces/user';\n\n@Component({\n  selector: 'app-setup',\n  templateUrl: './setup.component.html',\n  styleUrls: ['./setup.component.scss']\n})\nexport class SetupComponent implements OnInit {\n  categories: Category[];\n  currentUser: User;\n  data: Data = {\n    questions: [],\n    users: []\n    }\n\n\n\n  categoriesSubscription: Subscription;\n\n  game = { amount: 1, questionNum: 10, category: \"any\", difficulty: \"any\", type: \"any\" };\n  playerAmount = [1, 2, 3];\n\n  setUpForm: FormGroup;\n  selected = 'any';\n\n  constructor(\n    private triviaService: TriviaService,\n    private authService: AuthService,\n    private sendDataService: SendDataService,\n    private route: ActivatedRoute,\n    public dialog: MatDialog,\n    private router: Router,\n    private snackBar: MatSnackBar\n  ) { }\n\n  ngOnInit(): void {\n    this.getCurrentUser()\n    this.categories = this.route.snapshot.data.categories\n    this.setUpForm = new FormGroup({\n      'amount': new FormControl(this.game.amount),\n      'questionNum': new FormControl(this.game.questionNum, [\n        Validators.required,\n        Validators.max(50),\n        Validators.min(1),\n        sameAmountValidator\n      ]),\n      'category': new FormControl(this.game.category),\n      'difficulty': new FormControl(this.game.difficulty),\n      'type': new FormControl(this.game.type)\n    }, { validators: sameAmountValidator })\n\n    this.getCategories()\n  }\n\n  ngOnDestroy() {\n    this.categoriesSubscription.unsubscribe();\n  }\n\n  get questionNum() { return this.setUpForm.get('questionNum') }\n\n  getCategories() {\n    this.categoriesSubscription = this.triviaService.getCategoriesObservable()\n      .subscribe(categories => this.categories = categories);\n  }\n\n  chooseUser() {\n    this.data.users = []\n    if (Number(this.setUpForm.value.amount) > 1) {\n      const dialogRef = this.dialog.open(PlayerDialogComponent, {\n        width: '1000px',\n        disableClose: true,\n        data: { amount: this.setUpForm.value.amount, currentUser: this.currentUser }\n      });\n\n      dialogRef.afterClosed().subscribe(result => {\n        if (result === \"canceled\") {\n          this.setUpForm.get('amount').setValue(1)\n        }\n        else {\n          this.data.users = result\n        }\n      });\n    }\n  }\n\n  getCurrentUser() {\n    this.authService.userIdChange.subscribe(id => {\n      if(id !== '') {\n      this.triviaService.getCurrentUserObservable(id).subscribe(user => this.currentUser = user)\n      }\n    })\n  }\n\n  sendData(data) {\n    this.sendDataService.sendGameData(data);\n  }\n\n  submitForm() {\n    let category = this.setUpForm.value.category;\n    let difficulty = this.setUpForm.value.difficulty;\n    let type = this.setUpForm.value.type;\n\n    this.triviaService.getQuestionsObservable(\n      this.setUpForm.value.questionNum,\n      category === \"any\" ? null : category,\n      difficulty === \"any\" ? null : difficulty,\n      type === \"any\" ? null : type\n    ).subscribe(questions => {\n      this.data.questions = questions\n      if (this.data.questions.length !== 0) {\n        if(Number(this.setUpForm.value.amount) === 1){\n          this.data.users = [this.currentUser]\n        }\n        this.router.navigate(['/game'])\n        this.sendData(this.data)\n      }\n      else {\n        this.snackBar.open(\"OOPS! There doesn't seem to be any questions matching your set up!\", \"Close\", {\n          duration: 2000,\n          panelClass: ['mat-toolbar', 'mat-warn']\n        })\n      }\n    });\n\n  }\n\n}\n","<mat-card *ngIf=\"categories\" id=\"game-set-up\">\n    <mat-card-title>Game Set Up</mat-card-title>\n    <mat-card-content>\n        <form (ngSubmit)=\"submitForm()\" [formGroup]=\"setUpForm\"> \n            <mat-form-field>\n                <mat-label>Amount of Players:</mat-label>\n                <select matNativeControl formControlName=\"amount\" (change)=\"chooseUser()\">\n                    <option [value]=player  *ngFor=\"let player of playerAmount\">{{player}}</option>\n                </select>\n                \n            </mat-form-field>\n\n            <mat-form-field>\n                <!-- make sure it will divide correct between players -->\n                <mat-label>Number of Questions:</mat-label>\n                <input \n                  matInput \n                  type=\"number\"\n                  required \n                  max=\"50\"\n                  min=\"1\"\n                  id=\"questionNum\" \n                  formControlName=\"questionNum\"\n                >\n            </mat-form-field>\n                <div *ngIf=\"questionNum.invalid && (questionNum.dirty || questionNum.touched)\">\n                    <mat-error *ngIf=\"questionNum.errors.max\">\n                        50 is the maximum amount\n                    </mat-error>\n                    <mat-error *ngIf=\"questionNum.errors.min\">\n                        Need at least one question to play\n                    </mat-error>\n                    <mat-error *ngIf=\"questionNum.errors.required\">\n                        Number is required\n                    </mat-error>\n                </div>\n                <mat-error *ngIf=\"setUpForm.errors?.notDivisibleByPlayers && setUpForm.invalid\">\n                    Please enter an amount so each player can have the same amount of questions\n                </mat-error>\n            \n            <mat-form-field>\n                <mat-label>Select Category:</mat-label>\n                <mat-select [(value)]=\"selected\" formControlName=\"category\">\n                    <mat-option value=\"any\">Any Category</mat-option>\n                    <mat-option *ngFor=\"let category of categories\" [value]=\"category.id\">\n                      {{category.name}}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n\n            <mat-form-field>\n                <mat-label>Select Difficulty:</mat-label>\n                <select matNativeControl formControlName=\"difficulty\">\n                    <option value=\"any\">Any Difficulty</option>\n                    <option value=\"easy\">Easy</option>\n                    <option value=\"medium\">Medium</option>\n                    <option value=\"hard\">Hard</option>\n                </select>\n            </mat-form-field>\n\n            <mat-form-field>\n                <mat-label>Select Type:</mat-label>\n                <select matNativeControl formControlName=\"type\">\n                    <option value=\"any\">Any Type</option>\n                    <option value=\"boolean\">True or False</option>\n                    <option value=\"multiple\">Mutiple Choice</option>\n                </select>\n            </mat-form-field>\n            <div id=\"button-container\">\n              <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"setUpForm.invalid\">Let's Play!</button>\n            </div>\n        </form>\n    </mat-card-content>\n</mat-card>\n\n<div id=\"spinner\">\n  <mat-spinner *ngIf=\"!categories\"></mat-spinner>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { Observable, Subscription } from 'rxjs';\nimport { User } from '../interfaces/user';\nimport { TriviaService } from '../services/trivia.service';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n  selector: 'app-user-stats',\n  templateUrl: './user-stats.component.html',\n  styleUrls: ['./user-stats.component.scss']\n})\nexport class UserStatsComponent implements OnInit {\n  player: User;\n\n  worstCategories: string[] = [\"No data yet. Go play some games!\"];\n  bestCategories: string[]  = [\"No data yet. Go play some games!\"];\n\n  currentUserSubscription: Subscription;\n\n  defaultAvatarURL: string = 'https://i0.wp.com/www.mvhsoracle.com/wp-content/uploads/2018/08/default-avatar.jpg?ssl=1';\n  avatar: string;\n\n  constructor(\n    private triviaService: TriviaService,\n    private authService: AuthService\n  ) { }\n\n  ngOnInit(): void {\n    this.authService.userIdChange.subscribe(id => {\n      if (id !== '') {\n        this.currentUserSubscription = this.triviaService.getCurrentUserObservable(id).subscribe(user => {\n          let cH = 0;\n          let cL = 1;\n          let cHR: string[] = [];\n          let cLR: string[] = [];\n\n          for (let cA of user.categoryAnswers) {\n            if (cA.answeredCorrectly !== 0 && cA.answeredIncorrectly !== 0) {\n              const ratio: number = Number((cA.answeredCorrectly / (cA.answeredCorrectly + cA.answeredIncorrectly)).toFixed(1));\n\n              if (cH === ratio) {\n                cHR.push(cA.category);\n              } else if (cH < ratio) {\n                cH = ratio;\n                cHR = [cA.category];\n              }\n\n              if (cL === ratio) {\n                cLR.push(cA.category);\n              } else if (cL > ratio) {\n                cL = ratio;\n                cLR = [cA.category];\n              }\n            }\n          }\n\n          if (cHR.join() === cLR.join() && (cHR.length > 0 && cLR.length > 0)) {\n            this.bestCategories = cHR;\n          } else {\n            if (cHR.length > 0) {\n              this.bestCategories = cHR;\n            }\n  \n            if (cLR.length > 0) {\n              this.worstCategories = cLR;\n            }\n          }\n\n          if(user.photoURL) {\n            if (/facebook/.test(user.photoURL)) {\n              this.avatar = user.photoURL + \"?type=large\"\n            } else {\n              this.avatar = user.photoURL;\n            }\n          } else {\n            this.avatar = this.defaultAvatarURL\n          }\n\n          this.player = user;\n          \n        });\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.currentUserSubscription.unsubscribe();\n  }\n\n  getDefaultUsername(email: string): string {\n    return email.replace(/@.+/, '');\n  }\n}\n","<div>\n  <mat-card *ngIf=\"player\" class=\"mat-toolbar mat-warn\" id=\"user\">\n    <mat-card-title *ngIf=\"player.email || player.displayName\">{{ player.displayName ? player.displayName : getDefaultUsername(player.email) }}</mat-card-title>\n  \n    <mat-card-content class=\"main\">\n      <img [src]=\"avatar\">\n      <mat-list>\n        <mat-list-item *ngIf=\"player.email\">\n          <mat-card-subtitle>\n          {{ player.email }}\n        </mat-card-subtitle>\n        </mat-list-item>\n        <mat-list-item *ngIf=\"player.phoneNumber\">\n          <mat-card-subtitle>{{ player.phoneNumber }}</mat-card-subtitle>\n        </mat-list-item>\n      </mat-list>\n    </mat-card-content>\n  </mat-card>\n  \n  <mat-card *ngIf=\"player\">\n    <mat-card-title>Game Stats</mat-card-title>\n    <mat-card-content>\n     <div class=\"statRow\">\n        <p colspan=\"2\">Total Games Played:</p>\n        <p>{{ player.totalGamesPlayed }}</p>\n      </div>\n      <div class=\"statRow\">\n        <p colspan=\"2\">Games Won:</p>\n        <p>{{ player.totalGamesWon }}</p>\n      </div>\n      <div class=\"statRow\">\n        <p colspan=\"2\">Games Lost:</p>\n        <p>{{ player.totalGamesLost }}</p>\n      </div>\n      <div class=\"statRow\">\n        <p colspan=\"2\">Questions Answered:</p>\n        <p>{{ player.totalQuestionsAnswered }}</p>\n      </div>\n      <div class=\"statRow\">\n        <p colspan=\"2\">Answered Correctly:</p>\n        <p>{{ player.totalQuestionsAnsweredCorrectly }}</p>\n      </div>\n      <div class=\"statRow\">\n        <p colspan=\"2\">Answered Incorrectly:</p>\n        <p>{{ player.totalQuestionsAnsweredIncorrectly }}</p>\n      </div>\n\n      <mat-expansion-panel class=\"mat-toolbar mat-accent\">\n        <mat-expansion-panel-header>\n          <mat-panel-title>Best Category(s):</mat-panel-title>\n        </mat-expansion-panel-header>\n        <ul>\n          <li *ngFor=\"let category of bestCategories\">{{ category }}</li>\n        </ul>\n      </mat-expansion-panel>\n\n      <mat-expansion-panel class=\"mat-toolbar mat-warn\">\n        <mat-expansion-panel-header>\n          <mat-panel-title>Worst Category(s):</mat-panel-title>\n        </mat-expansion-panel-header>\n        <ul>\n          <li *ngFor=\"let category of worstCategories\">{{ category }}</li>\n        </ul>\n      </mat-expansion-panel>\n \n      <!-- <mat-list>\n        <mat-list-item>Best Category(s):</mat-list-item>\n        <mat-list-item *ngFor=\"let category of bestCategories; let i = index\">\n          <mat-card-subtitle>{{ i + 1 }}. {{ category }}</mat-card-subtitle>\n        </mat-list-item>\n        <mat-list-item>Worst Category(s):</mat-list-item>\n        <mat-list-item *ngFor=\"let category of worstCategories; let i = index\">\n          <mat-card-subtitle>{{ i + 1 }}. {{ category }}</mat-card-subtitle>\n        </mat-list-item>\n      </mat-list> -->\n    </mat-card-content>\n  </mat-card>\n</div>\n\n<div id=\"spinner\">\n  <mat-spinner *ngIf=\"!player\"></mat-spinner>\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  firebase: {\n    apiKey: 'AIzaSyAayqPi75_IIAt0TeYOF1s6WDjQXsm_u6U',\n    authDomain: 'trivia-43e20.firebaseapp.com',\n    databaseURL: 'https://trivia-43e20.firebaseio.com',\n    projectId: 'trivia-43e20',\n    storageBucket: 'trivia-43e20.appspot.com',\n    messagingSenderId: '766024110773',\n    appId: '1:766024110773:web:3b5439860006b47a3424fc'\n  }\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}